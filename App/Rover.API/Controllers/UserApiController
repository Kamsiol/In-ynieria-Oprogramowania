using Microsoft.AspNetCore.Mvc;
using Rover.Infrastructure;
using Rover.Domain;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Rover.Application.Users;
using MediatR;
using Microsoft.AspNetCore.Components.Forms;

namespace Rover.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AccountController : ControllerBase
    {
        private readonly DataContext _context;
        private readonly IMediator _mediator;

        public AccountController(DataContext context, IMediator mediator)
        {
            _context = context;
            _mediator = mediator;
        }

        // Получение всех пользователей
        [HttpGet("users")]
        [AllowAnonymous]
        public async Task<IActionResult> GetAllUsers()
        {
            var users = await _context.userData.ToListAsync();
            if (users == null || users.Count == 0)
                return NotFound("No users found.");

            return Ok(users);
        }

        [HttpPost("register")]
        [AllowAnonymous]
        public async Task<IActionResult> RegisterUser([FromBody] CreateUser.Command command)
        {
            var result = await _mediator.Send(command);
            if (result.Contains("exists"))
                return BadRequest(result);

            return Ok(result);
        }

        // Логин пользователя
        [HttpPost("login")]
        [AllowAnonymous]
        public async Task<IActionResult> LoginUser([FromBody] LoginUser.Query query)
        {
            var result = await _mediator.Send(query);
            if (result.Contains("Invalid"))
                return Unauthorized(result);

            return Ok(result);
        }
    }
}
